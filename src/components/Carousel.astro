---
export interface Props {
  images: Array<{
    src: string;
    alt: string;
    title?: string;
  }>;
  id: string;
  showAttributions?: boolean;
  attributions?: {
    en: string[];
    de: string[];
  };
}

const { images, id, showAttributions = false, attributions } = Astro.props;
---

<div class="carousel" id={id}>
  <div class="carousel-container">
    {images.map((image, index) => (
      <div class="carousel-slide">
        <img 
          src={image.src} 
          alt={image.alt} 
          title={image.title || image.alt}
          class="carousel-image"
        />
      </div>
    ))}
  </div>
  
  {images.length > 1 && (
    <>
      <button class="carousel-prev" aria-label="Previous">
        <svg width="20" height="20" fill="currentColor" viewBox="0 0 24 24">
          <path d="M15.41 7.41L14 6l-6 6 6 6 1.41-1.41L10.83 12z"/>
        </svg>
      </button>
      <button class="carousel-next" aria-label="Next">
        <svg width="20" height="20" fill="currentColor" viewBox="0 0 24 24">
          <path d="M8.59 16.59L10 18l6-6-6-6-1.41 1.41L13.17 12z"/>
        </svg>
      </button>
      
      <div class="carousel-nav">
        {images.map((_, index) => (
          <button 
            class={`carousel-dot ${index === 0 ? 'active' : ''}`}
            aria-label={`Go to slide ${index + 1}`}
            data-slide={index}
          ></button>
        ))}
      </div>
    </>
  )}
</div>

{showAttributions && attributions && (
  <div class="mt-3 flex justify-center">
    <button 
      class="attribution-trigger inline-flex items-center gap-1 text-xs text-muted hover:text-white transition-colors cursor-pointer"
      aria-label="Show data attributions"
    >
      <svg width="14" height="14" fill="currentColor" viewBox="0 0 24 24">
        <path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm1 15h-2v-6h2v6zm0-8h-2V7h2v2z"/>
      </svg>
      <span>Data Sources</span>
    </button>
    
    <div class="attribution-modal hidden fixed inset-0 bg-black/50 flex items-center justify-center z-50" style="backdrop-filter: blur(4px);">
      <div class="attribution-content bg-[#0B0E12] border border-white/20 rounded-lg p-6 max-w-md mx-4 relative">
        <button class="attribution-close absolute top-4 right-4 text-muted hover:text-white transition-colors">
          <svg width="18" height="18" fill="currentColor" viewBox="0 0 24 24">
            <path d="M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z"/>
          </svg>
        </button>
        
        <h3 class="text-lg font-semibold mb-4 gradient-text">Data Sources</h3>
        
        <div class="space-y-3 text-sm">
          <div data-lang="en" class="attribution-lang">
            {attributions.en.map((attribution) => (
              <p class="text-muted leading-relaxed">{attribution}</p>
            ))}
          </div>
          
          <div data-lang="de" class="attribution-lang">
            {attributions.de.map((attribution) => (
              <p class="text-muted leading-relaxed">{attribution}</p>
            ))}
          </div>
        </div>
      </div>
    </div>
  </div>
)}

<script>
  function initCarousel(id: string) {
    const carousel = document.getElementById(id);
    const container = carousel?.querySelector('.carousel-container') as HTMLElement;
    const slides = container?.children;
    const dots = carousel?.querySelectorAll('.carousel-dot');
    const prevBtn = carousel?.querySelector('.carousel-prev') as HTMLButtonElement;
    const nextBtn = carousel?.querySelector('.carousel-next') as HTMLButtonElement;
    let currentSlide = 0;
    
    if (!container || !slides || !dots) return;
    
    function updateSlide() {
      container.style.transform = `translateX(-${currentSlide * 100}%)`;
      dots.forEach((dot, index) => {
        dot.classList.toggle('active', index === currentSlide);
      });
    }
    
    function prevSlide() {
      currentSlide = (currentSlide - 1 + slides.length) % slides.length;
      updateSlide();
    }
    
    function nextSlide() {
      currentSlide = (currentSlide + 1) % slides.length;
      updateSlide();
    }
    
    function goToSlide(index: number) {
      currentSlide = index;
      updateSlide();
    }
    
    // Add event listeners
    if (prevBtn) {
      prevBtn.addEventListener('click', prevSlide);
    }
    
    if (nextBtn) {
      nextBtn.addEventListener('click', nextSlide);
    }
    
    dots.forEach((dot, index) => {
      dot.addEventListener('click', () => goToSlide(index));
    });
  }
  
  function initAttributionModal() {
    const triggers = document.querySelectorAll('.attribution-trigger');
    
    triggers.forEach(trigger => {
      const modal = trigger.closest('.mt-3')?.querySelector('.attribution-modal');
      const closeBtn = modal?.querySelector('.attribution-close');
      
      if (!modal || !closeBtn) return;
      
      // Get current language from document
      const currentLang = document.documentElement.getAttribute('data-lang') || 'en';
      
      // Show/hide language-specific attributions
      const langElements = modal.querySelectorAll('.attribution-lang');
      langElements.forEach(el => {
        const lang = el.getAttribute('data-lang');
        if (lang === currentLang) {
          el.style.display = 'block';
        } else {
          el.style.display = 'none';
        }
      });
      
      // Open modal
      trigger.addEventListener('click', (e) => {
        e.preventDefault();
        modal.classList.remove('hidden');
        document.body.style.overflow = 'hidden';
      });
      
      // Close modal
      const closeModal = () => {
        modal.classList.add('hidden');
        document.body.style.overflow = '';
      };
      
      closeBtn.addEventListener('click', closeModal);
      
      // Close on backdrop click
      modal.addEventListener('click', (e) => {
        if (e.target === modal) {
          closeModal();
        }
      });
      
      // Close on escape key
      document.addEventListener('keydown', (e) => {
        if (e.key === 'Escape' && !modal.classList.contains('hidden')) {
          closeModal();
        }
      });
    });
  }

  // Initialize all carousels and attribution modals
  document.addEventListener('DOMContentLoaded', () => {
    const carousels = document.querySelectorAll('.carousel');
    carousels.forEach(carousel => {
      const id = carousel.id;
      if (id) initCarousel(id);
    });
    
    initAttributionModal();
  });
</script>

<style>
  .carousel-container {
    display: flex;
    transition: transform 0.3s ease-in-out;
  }
  
  .carousel-slide {
    flex-shrink: 0;
    width: 100%;
  }
  
  .carousel-image {
    width: 100%;
    height: auto;
    border-radius: 0.5rem;
  }
</style>
